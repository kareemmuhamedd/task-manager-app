// Mocks generated by Mockito 5.4.4 from annotations
// in management_tasks_app/test/utilities/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:dio/dio.dart' as _i2;
import 'package:either_dart/either.dart' as _i14;
import 'package:management_tasks_app/features/auth/data/data_sources/auth_local_data_source.dart'
    as _i10;
import 'package:management_tasks_app/features/auth/data/data_sources/auth_remote_data_source.dart'
    as _i9;
import 'package:management_tasks_app/features/auth/data/models/auth_model.dart'
    as _i3;
import 'package:management_tasks_app/features/auth/data/models/profile_model.dart'
    as _i4;
import 'package:management_tasks_app/features/auth/domain/entities/auth_entity.dart'
    as _i16;
import 'package:management_tasks_app/features/auth/domain/entities/profile_entity.dart'
    as _i18;
import 'package:management_tasks_app/features/auth/domain/repositories/auth_repository.dart'
    as _i13;
import 'package:management_tasks_app/features/auth/domain/usecases/get_current_user_usecase.dart'
    as _i22;
import 'package:management_tasks_app/features/auth/domain/usecases/login_usecase.dart'
    as _i24;
import 'package:management_tasks_app/features/todos/data/data_sources/todo_local_data_source.dart'
    as _i12;
import 'package:management_tasks_app/features/todos/data/data_sources/todo_remote_data_source.dart'
    as _i11;
import 'package:management_tasks_app/features/todos/data/models/todo_details_model.dart'
    as _i6;
import 'package:management_tasks_app/features/todos/data/models/todo_model.dart'
    as _i5;
import 'package:management_tasks_app/features/todos/domain/entities/todo_details_entity.dart'
    as _i21;
import 'package:management_tasks_app/features/todos/domain/entities/todo_entity.dart'
    as _i20;
import 'package:management_tasks_app/features/todos/domain/repositories/todo_repository.dart'
    as _i19;
import 'package:management_tasks_app/features/todos/domain/usecases/create_todo_usecase.dart'
    as _i25;
import 'package:management_tasks_app/features/todos/domain/usecases/delete_todo_usecase.dart'
    as _i27;
import 'package:management_tasks_app/features/todos/domain/usecases/get_pagination_todos_usecase.dart'
    as _i28;
import 'package:management_tasks_app/features/todos/domain/usecases/update_todo_usecase.dart'
    as _i26;
import 'package:management_tasks_app/shared/errors/custom_error_handler.dart'
    as _i15;
import 'package:management_tasks_app/shared/networking/connection_checker.dart'
    as _i29;
import 'package:management_tasks_app/shared/networking/dio_factory.dart' as _i7;
import 'package:management_tasks_app/shared/usecase/usecase.dart' as _i23;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBaseOptions_0 extends _i1.SmartFake implements _i2.BaseOptions {
  _FakeBaseOptions_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientAdapter_1 extends _i1.SmartFake
    implements _i2.HttpClientAdapter {
  _FakeHttpClientAdapter_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransformer_2 extends _i1.SmartFake implements _i2.Transformer {
  _FakeTransformer_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptors_3 extends _i1.SmartFake implements _i2.Interceptors {
  _FakeInterceptors_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4<T1> extends _i1.SmartFake implements _i2.Response<T1> {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDio_5 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthModel_6 extends _i1.SmartFake implements _i3.AuthModel {
  _FakeAuthModel_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProfileModel_7 extends _i1.SmartFake implements _i4.ProfileModel {
  _FakeProfileModel_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoModel_8 extends _i1.SmartFake implements _i5.TodoModel {
  _FakeTodoModel_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoDetailsModel_9 extends _i1.SmartFake
    implements _i6.TodoDetailsModel {
  _FakeTodoDetailsModel_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DioFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioFactory extends _i1.Mock implements _i7.DioFactory {
  MockDioFactory() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i2.Dio {
  MockDio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeBaseOptions_0(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.BaseOptions);

  @override
  set options(_i2.BaseOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.HttpClientAdapter get httpClientAdapter => (super.noSuchMethod(
        Invocation.getter(#httpClientAdapter),
        returnValue: _FakeHttpClientAdapter_1(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
      ) as _i2.HttpClientAdapter);

  @override
  set httpClientAdapter(_i2.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpClientAdapter,
          _httpClientAdapter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Transformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: _FakeTransformer_2(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i2.Transformer);

  @override
  set transformer(_i2.Transformer? _transformer) => super.noSuchMethod(
        Invocation.setter(
          #transformer,
          _transformer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Interceptors get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: _FakeInterceptors_3(
          this,
          Invocation.getter(#interceptors),
        ),
      ) as _i2.Interceptors);

  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i2.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i2.CancelToken? cancelToken,
    bool? deleteOnError = true,
    _i2.FileAccessMode? fileAccessMode = _i2.FileAccessMode.write,
    String? lengthHeader = r'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [
            urlPath,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #fileAccessMode: fileAccessMode,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i8.Future<_i2.Response<dynamic>>.value(_FakeResponse_4<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #fileAccessMode: fileAccessMode,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<dynamic>>);

  @override
  _i8.Future<_i2.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    _i2.CancelToken? cancelToken,
    bool? deleteOnError = true,
    _i2.FileAccessMode? fileAccessMode = _i2.FileAccessMode.write,
    String? lengthHeader = r'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUri,
          [
            uri,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #fileAccessMode: fileAccessMode,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i8.Future<_i2.Response<dynamic>>.value(_FakeResponse_4<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #fileAccessMode: fileAccessMode,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<dynamic>>);

  @override
  _i8.Future<_i2.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [url],
          {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i2.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestUri,
          [uri],
          {
            #data: data,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> fetch<T>(_i2.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [requestOptions],
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i2.Dio clone({
    _i2.BaseOptions? options,
    _i2.Interceptors? interceptors,
    _i2.HttpClientAdapter? httpClientAdapter,
    _i2.Transformer? transformer,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clone,
          [],
          {
            #options: options,
            #interceptors: interceptors,
            #httpClientAdapter: httpClientAdapter,
            #transformer: transformer,
          },
        ),
        returnValue: _FakeDio_5(
          this,
          Invocation.method(
            #clone,
            [],
            {
              #options: options,
              #interceptors: interceptors,
              #httpClientAdapter: httpClientAdapter,
              #transformer: transformer,
            },
          ),
        ),
      ) as _i2.Dio);
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i9.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.AuthModel> signIn({
    required String? userName,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
          {
            #userName: userName,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i3.AuthModel>.value(_FakeAuthModel_6(
          this,
          Invocation.method(
            #signIn,
            [],
            {
              #userName: userName,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i3.AuthModel>);

  @override
  _i8.Future<_i4.ProfileModel> currentUser() => (super.noSuchMethod(
        Invocation.method(
          #currentUser,
          [],
        ),
        returnValue: _i8.Future<_i4.ProfileModel>.value(_FakeProfileModel_7(
          this,
          Invocation.method(
            #currentUser,
            [],
          ),
        )),
      ) as _i8.Future<_i4.ProfileModel>);
}

/// A class which mocks [ProfileLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileLocalDataSource extends _i1.Mock
    implements _i10.ProfileLocalDataSource {
  MockProfileLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.ProfileModel?> getProfile() => (super.noSuchMethod(
        Invocation.method(
          #getProfile,
          [],
        ),
        returnValue: _i8.Future<_i4.ProfileModel?>.value(),
      ) as _i8.Future<_i4.ProfileModel?>);

  @override
  _i8.Future<void> saveProfile(_i4.ProfileModel? profile) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveProfile,
          [profile],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> clearProfile() => (super.noSuchMethod(
        Invocation.method(
          #clearProfile,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [TodoRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRemoteDataSource extends _i1.Mock
    implements _i11.TodoRemoteDataSource {
  MockTodoRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i5.TodoModel> getTodos() => (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [],
        ),
        returnValue: _i8.Future<_i5.TodoModel>.value(_FakeTodoModel_8(
          this,
          Invocation.method(
            #getTodos,
            [],
          ),
        )),
      ) as _i8.Future<_i5.TodoModel>);

  @override
  _i8.Future<_i5.TodoModel> getTodoById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getTodoById,
          [id],
        ),
        returnValue: _i8.Future<_i5.TodoModel>.value(_FakeTodoModel_8(
          this,
          Invocation.method(
            #getTodoById,
            [id],
          ),
        )),
      ) as _i8.Future<_i5.TodoModel>);

  @override
  _i8.Future<_i5.TodoModel> getRandomTodo() => (super.noSuchMethod(
        Invocation.method(
          #getRandomTodo,
          [],
        ),
        returnValue: _i8.Future<_i5.TodoModel>.value(_FakeTodoModel_8(
          this,
          Invocation.method(
            #getRandomTodo,
            [],
          ),
        )),
      ) as _i8.Future<_i5.TodoModel>);

  @override
  _i8.Future<_i5.TodoModel> getPaginationTodos({
    required int? limit,
    required int? skip,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPaginationTodos,
          [],
          {
            #limit: limit,
            #skip: skip,
          },
        ),
        returnValue: _i8.Future<_i5.TodoModel>.value(_FakeTodoModel_8(
          this,
          Invocation.method(
            #getPaginationTodos,
            [],
            {
              #limit: limit,
              #skip: skip,
            },
          ),
        )),
      ) as _i8.Future<_i5.TodoModel>);

  @override
  _i8.Future<_i5.TodoModel> getUserTodos(int? userId) => (super.noSuchMethod(
        Invocation.method(
          #getUserTodos,
          [userId],
        ),
        returnValue: _i8.Future<_i5.TodoModel>.value(_FakeTodoModel_8(
          this,
          Invocation.method(
            #getUserTodos,
            [userId],
          ),
        )),
      ) as _i8.Future<_i5.TodoModel>);

  @override
  _i8.Future<_i6.TodoDetailsModel> createTodo(_i6.TodoDetailsModel? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTodo,
          [todo],
        ),
        returnValue:
            _i8.Future<_i6.TodoDetailsModel>.value(_FakeTodoDetailsModel_9(
          this,
          Invocation.method(
            #createTodo,
            [todo],
          ),
        )),
      ) as _i8.Future<_i6.TodoDetailsModel>);

  @override
  _i8.Future<_i6.TodoDetailsModel> updateTodo(
    _i6.TodoDetailsModel? todo,
    int? todoId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [
            todo,
            todoId,
          ],
        ),
        returnValue:
            _i8.Future<_i6.TodoDetailsModel>.value(_FakeTodoDetailsModel_9(
          this,
          Invocation.method(
            #updateTodo,
            [
              todo,
              todoId,
            ],
          ),
        )),
      ) as _i8.Future<_i6.TodoDetailsModel>);

  @override
  _i8.Future<_i6.TodoDetailsModel> deleteTodoById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodoById,
          [id],
        ),
        returnValue:
            _i8.Future<_i6.TodoDetailsModel>.value(_FakeTodoDetailsModel_9(
          this,
          Invocation.method(
            #deleteTodoById,
            [id],
          ),
        )),
      ) as _i8.Future<_i6.TodoDetailsModel>);
}

/// A class which mocks [TodoLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoLocalDataSource extends _i1.Mock
    implements _i12.TodoLocalDataSource {
  MockTodoLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i5.TodoModel?> getTodos() => (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [],
        ),
        returnValue: _i8.Future<_i5.TodoModel?>.value(),
      ) as _i8.Future<_i5.TodoModel?>);

  @override
  _i8.Future<void> saveTodos(_i5.TodoModel? profile) => (super.noSuchMethod(
        Invocation.method(
          #saveTodos,
          [profile],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> clearTodos() => (super.noSuchMethod(
        Invocation.method(
          #clearTodos,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i13.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i16.AuthEntity>> signIn({
    required String? userName,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
          {
            #userName: userName,
            #password: password,
          },
        ),
        returnValue:
            _i8.Future<_i14.Either<_i15.ApiError, _i16.AuthEntity>>.value(
                _i17.dummyValue<_i14.Either<_i15.ApiError, _i16.AuthEntity>>(
          this,
          Invocation.method(
            #signIn,
            [],
            {
              #userName: userName,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i16.AuthEntity>>);

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i18.ProfileEntity>> currentUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #currentUser,
          [],
        ),
        returnValue:
            _i8.Future<_i14.Either<_i15.ApiError, _i18.ProfileEntity>>.value(
                _i17.dummyValue<_i14.Either<_i15.ApiError, _i18.ProfileEntity>>(
          this,
          Invocation.method(
            #currentUser,
            [],
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i18.ProfileEntity>>);
}

/// A class which mocks [TodoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRepository extends _i1.Mock implements _i19.TodoRepository {
  MockTodoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>> getTodos() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [],
        ),
        returnValue:
            _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>>.value(
                _i17.dummyValue<_i14.Either<_i15.ApiError, _i20.TodoEntity>>(
          this,
          Invocation.method(
            #getTodos,
            [],
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>>);

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>> getTodoById(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodoById,
          [id],
        ),
        returnValue:
            _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>>.value(
                _i17.dummyValue<_i14.Either<_i15.ApiError, _i20.TodoEntity>>(
          this,
          Invocation.method(
            #getTodoById,
            [id],
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>>);

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>> getRandomTodo() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRandomTodo,
          [],
        ),
        returnValue:
            _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>>.value(
                _i17.dummyValue<_i14.Either<_i15.ApiError, _i20.TodoEntity>>(
          this,
          Invocation.method(
            #getRandomTodo,
            [],
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>>);

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>> getPaginationTodos({
    required int? limit,
    required int? skip,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPaginationTodos,
          [],
          {
            #limit: limit,
            #skip: skip,
          },
        ),
        returnValue:
            _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>>.value(
                _i17.dummyValue<_i14.Either<_i15.ApiError, _i20.TodoEntity>>(
          this,
          Invocation.method(
            #getPaginationTodos,
            [],
            {
              #limit: limit,
              #skip: skip,
            },
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>>);

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>> getUserTodos(
          int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserTodos,
          [userId],
        ),
        returnValue:
            _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>>.value(
                _i17.dummyValue<_i14.Either<_i15.ApiError, _i20.TodoEntity>>(
          this,
          Invocation.method(
            #getUserTodos,
            [userId],
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>>);

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>> createTodo(
          _i21.TodoDetailsEntity? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTodo,
          [todo],
        ),
        returnValue: _i8
            .Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>.value(
            _i17.dummyValue<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>(
          this,
          Invocation.method(
            #createTodo,
            [todo],
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>);

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>> updateTodo(
    _i21.TodoDetailsEntity? todo,
    int? todoId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [
            todo,
            todoId,
          ],
        ),
        returnValue: _i8
            .Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>.value(
            _i17.dummyValue<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>(
          this,
          Invocation.method(
            #updateTodo,
            [
              todo,
              todoId,
            ],
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>);

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>> deleteTodoById(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodoById,
          [id],
        ),
        returnValue: _i8
            .Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>.value(
            _i17.dummyValue<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>(
          this,
          Invocation.method(
            #deleteTodoById,
            [id],
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>);
}

/// A class which mocks [GetCurrentUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentUserUseCase extends _i1.Mock
    implements _i22.GetCurrentUserUseCase {
  MockGetCurrentUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i18.ProfileEntity>> call(
          _i23.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i8.Future<_i14.Either<_i15.ApiError, _i18.ProfileEntity>>.value(
                _i17.dummyValue<_i14.Either<_i15.ApiError, _i18.ProfileEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i18.ProfileEntity>>);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i24.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i16.AuthEntity>> call(
          _i24.UserLoginParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i8.Future<_i14.Either<_i15.ApiError, _i16.AuthEntity>>.value(
                _i17.dummyValue<_i14.Either<_i15.ApiError, _i16.AuthEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i16.AuthEntity>>);
}

/// A class which mocks [CreateTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateTodoUseCase extends _i1.Mock implements _i25.CreateTodoUseCase {
  MockCreateTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>> call(
          _i25.CreateTodoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i8
            .Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>.value(
            _i17.dummyValue<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>);
}

/// A class which mocks [UpdateTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTodoUseCase extends _i1.Mock implements _i26.UpdateTodoUseCase {
  MockUpdateTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>> call(
          _i26.UpdateTodoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i8
            .Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>.value(
            _i17.dummyValue<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>);
}

/// A class which mocks [DeleteTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTodoUseCase extends _i1.Mock implements _i27.DeleteTodoUseCase {
  MockDeleteTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>> call(
          _i27.DeleteTodoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i8
            .Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>.value(
            _i17.dummyValue<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i21.TodoDetailsEntity>>);
}

/// A class which mocks [GetPaginationTodosUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPaginationTodosUseCase extends _i1.Mock
    implements _i28.GetPaginationTodosUseCase {
  MockGetPaginationTodosUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>> call(
          _i28.GetPaginationTodosParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>>.value(
                _i17.dummyValue<_i14.Either<_i15.ApiError, _i20.TodoEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i8.Future<_i14.Either<_i15.ApiError, _i20.TodoEntity>>);
}

/// A class which mocks [ConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionChecker extends _i1.Mock implements _i29.ConnectionChecker {
  MockConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}
